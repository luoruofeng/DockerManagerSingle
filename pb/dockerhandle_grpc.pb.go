// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DockerHandleClient is the client API for DockerHandle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DockerHandleClient interface {
	// Sends and recv data
	Operation(ctx context.Context, opts ...grpc.CallOption) (DockerHandle_OperationClient, error)
	// Get pull image log
	PullImageWithLog(ctx context.Context, in *PullImageWithLogRequest, opts ...grpc.CallOption) (DockerHandle_PullImageWithLogClient, error)
}

type dockerHandleClient struct {
	cc grpc.ClientConnInterface
}

func NewDockerHandleClient(cc grpc.ClientConnInterface) DockerHandleClient {
	return &dockerHandleClient{cc}
}

func (c *dockerHandleClient) Operation(ctx context.Context, opts ...grpc.CallOption) (DockerHandle_OperationClient, error) {
	stream, err := c.cc.NewStream(ctx, &DockerHandle_ServiceDesc.Streams[0], "/pb.DockerHandle/Operation", opts...)
	if err != nil {
		return nil, err
	}
	x := &dockerHandleOperationClient{stream}
	return x, nil
}

type DockerHandle_OperationClient interface {
	Send(*OperationRequest) error
	Recv() (*DialogueReply, error)
	grpc.ClientStream
}

type dockerHandleOperationClient struct {
	grpc.ClientStream
}

func (x *dockerHandleOperationClient) Send(m *OperationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dockerHandleOperationClient) Recv() (*DialogueReply, error) {
	m := new(DialogueReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dockerHandleClient) PullImageWithLog(ctx context.Context, in *PullImageWithLogRequest, opts ...grpc.CallOption) (DockerHandle_PullImageWithLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &DockerHandle_ServiceDesc.Streams[1], "/pb.DockerHandle/PullImageWithLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &dockerHandlePullImageWithLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DockerHandle_PullImageWithLogClient interface {
	Recv() (*DialogueReply, error)
	grpc.ClientStream
}

type dockerHandlePullImageWithLogClient struct {
	grpc.ClientStream
}

func (x *dockerHandlePullImageWithLogClient) Recv() (*DialogueReply, error) {
	m := new(DialogueReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DockerHandleServer is the server API for DockerHandle service.
// All implementations must embed UnimplementedDockerHandleServer
// for forward compatibility
type DockerHandleServer interface {
	// Sends and recv data
	Operation(DockerHandle_OperationServer) error
	// Get pull image log
	PullImageWithLog(*PullImageWithLogRequest, DockerHandle_PullImageWithLogServer) error
	mustEmbedUnimplementedDockerHandleServer()
}

// UnimplementedDockerHandleServer must be embedded to have forward compatible implementations.
type UnimplementedDockerHandleServer struct {
}

func (UnimplementedDockerHandleServer) Operation(DockerHandle_OperationServer) error {
	return status.Errorf(codes.Unimplemented, "method Operation not implemented")
}
func (UnimplementedDockerHandleServer) PullImageWithLog(*PullImageWithLogRequest, DockerHandle_PullImageWithLogServer) error {
	return status.Errorf(codes.Unimplemented, "method PullImageWithLog not implemented")
}
func (UnimplementedDockerHandleServer) mustEmbedUnimplementedDockerHandleServer() {}

// UnsafeDockerHandleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DockerHandleServer will
// result in compilation errors.
type UnsafeDockerHandleServer interface {
	mustEmbedUnimplementedDockerHandleServer()
}

func RegisterDockerHandleServer(s grpc.ServiceRegistrar, srv DockerHandleServer) {
	s.RegisterService(&DockerHandle_ServiceDesc, srv)
}

func _DockerHandle_Operation_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DockerHandleServer).Operation(&dockerHandleOperationServer{stream})
}

type DockerHandle_OperationServer interface {
	Send(*DialogueReply) error
	Recv() (*OperationRequest, error)
	grpc.ServerStream
}

type dockerHandleOperationServer struct {
	grpc.ServerStream
}

func (x *dockerHandleOperationServer) Send(m *DialogueReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dockerHandleOperationServer) Recv() (*OperationRequest, error) {
	m := new(OperationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DockerHandle_PullImageWithLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullImageWithLogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DockerHandleServer).PullImageWithLog(m, &dockerHandlePullImageWithLogServer{stream})
}

type DockerHandle_PullImageWithLogServer interface {
	Send(*DialogueReply) error
	grpc.ServerStream
}

type dockerHandlePullImageWithLogServer struct {
	grpc.ServerStream
}

func (x *dockerHandlePullImageWithLogServer) Send(m *DialogueReply) error {
	return x.ServerStream.SendMsg(m)
}

// DockerHandle_ServiceDesc is the grpc.ServiceDesc for DockerHandle service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DockerHandle_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.DockerHandle",
	HandlerType: (*DockerHandleServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Operation",
			Handler:       _DockerHandle_Operation_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PullImageWithLog",
			Handler:       _DockerHandle_PullImageWithLog_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dockerhandle.proto",
}
